Models

public class NoteUser
{
    public int IdUser { get; set; }
    public string Name { get; set; } = "";
    public string Email { get; set; } = "";
    public string Password { get; set; } = "";
    public int UserThemePreferences { get; set; }
    public int UserFontPreferences { get; set; }
    public DateTime CreatedAt { get; set; }

    public ICollection<Note> Notes { get; set; }
}
public class Note
{
    public int IdNote { get; set; }
    public string Title { get; set; } = "";
    public string Content { get; set; } = "";
    public string ImageUrl { get; set; } = "";
    public bool IsFavorite { get; set; }
    public bool IsArchived { get; set; }
    public DateTime CreatedAt { get; set; }
    public DateTime UpdatedAt { get; set; }

    public int IdUser { get; set; }
    public NoteUser User { get; set; }

    public ICollection<NoteTag> NoteTags { get; set; }
}
public class Tag
{
    public int IdTag { get; set; }
    public string Name { get; set; } = "";

    public ICollection<NoteTag> NoteTags { get; set; }
}
public class NoteTag
{
    public int IdNoteTag { get; set; }

    public int IdNote { get; set; }
    public Note Note { get; set; }

    public int IdTag { get; set; }
    public Tag Tag { get; set; }
}


---------------------------------

public interface IUserRepository
{
    Task<IEnumerable<NoteUser>> GetAllAsync();
    Task<NoteUser?> GetByIdAsync(int id);
    Task<NoteUser?> GetByEmailAsync(string email);
    Task<NoteUser> CreateAsync(NoteUser user);
    Task UpdateAsync(NoteUser user);
    Task DeleteAsync(NoteUser user);
}

---------------------------------

public class UserRepository : IUserRepository
{
    private readonly AppDbContext _context;
    public UserRepository(AppDbContext context)
    {
        _context = context;
    }

    public async Task<IEnumerable<NoteUser>> GetAllAsync()
        => await _context.NoteUsers.ToListAsync();

    public async Task<NoteUser?> GetByIdAsync(int id)
        => await _context.NoteUsers.FindAsync(id);

    public async Task<NoteUser?> GetByEmailAsync(string email)
        => await _context.NoteUsers.FirstOrDefaultAsync(u => u.Email == email);

    public async Task<NoteUser> CreateAsync(NoteUser user)
    {
        _context.NoteUsers.Add(user);
        await _context.SaveChangesAsync();
        return user;
    }

    public async Task UpdateAsync(NoteUser user)
    {
        _context.NoteUsers.Update(user);
        await _context.SaveChangesAsync();
    }

    public async Task DeleteAsync(NoteUser user)
    {
        _context.NoteUsers.Remove(user);
        await _context.SaveChangesAsync();
    }
}


--------

public class PasswordService
{
    private readonly PasswordHasher<NoteUser> _hasher = new();

    public string HashPassword(NoteUser user)
    {
        return _hasher.HashPassword(user, user.Password);
    }

    public bool VerifyPassword(NoteUser user, string providedPassword)
    {
        var result = _hasher.VerifyHashedPassword(user, user.Password, providedPassword);
        return result == PasswordVerificationResult.Success;
    }
}
------
public class TokenService
{
    private const string Secret = "nossa-chave-secreta-mega-master-ultra-segura-senai";

    public string GenerateToken(string email)
    {
        var claims = new[]
        {
            new Claim(ClaimTypes.Email, email)
        };

        var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(Secret));
        var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

        var token = new JwtSecurityToken(
            issuer: "SenaiNotes",
            audience: "SenaiNotes",
            claims: claims,
            expires: DateTime.UtcNow.AddHours(1),
            signingCredentials: creds
        );

        return new JwtSecurityTokenHandler().WriteToken(token);
    }
}

-----------

NotesUsersController

[Authorize]
[ApiController]
[Route("api/[controller]")]
public class NoteUsersController : ControllerBase
{
    private readonly IUserRepository _userRepo;

    public NoteUsersController(IUserRepository userRepo)
    {
        _userRepo = userRepo;
    }

    [HttpGet]
    public async Task<IActionResult> GetAll()
    {
        var users = await _userRepo.GetAllAsync();
        return Ok(users);
    }

    [HttpGet("{id}")]
    public async Task<IActionResult> GetById(int id)
    {
        var user = await _userRepo.GetByIdAsync(id);
        if (user == null)
            return NotFound();

        return Ok(user);
    }

    [HttpPut("{id}")]
    public async Task<IActionResult> Update(int id, NoteUser updatedUser)
    {
        if (id != updatedUser.IdUser)
            return BadRequest();

        var user = await _userRepo.GetByIdAsync(id);
        if (user == null)
            return NotFound();

        user.Name = updatedUser.Name;
        user.Email = updatedUser.Email;
        user.UserThemePreferences = updatedUser.UserThemePreferences;
        user.UserFontPreferences = updatedUser.UserFontPreferences;

        await _userRepo.UpdateAsync(user);

        return NoContent();
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> Delete(int id)
    {
        var user = await _userRepo.GetByIdAsync(id);
        if (user == null)
            return NotFound();

        await _userRepo.DeleteAsync(user);

        return NoContent();
    }
}

--------------



Program.cs

builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
})
.AddJwtBearer(options =>
{
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuer = true,
        ValidateAudience = true,
        ValidateLifetime = true,
        ValidateIssuerSigningKey = true,
        ValidIssuer = "SenaiNotes",
        ValidAudience = "SenaiNotes",
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes("nossa-chave-secreta-mega-master-ultra-segura-senai"))
    };
});

builder.Services.AddAuthorization();
-----

Middleware

app.UseAuthentication();
app.UseAuthorization();

-----

AuthController

[ApiController]
[Route("api/[controller]")]
public class AuthController : ControllerBase
{
    private readonly IUserRepository _userRepo;
    private readonly PasswordService _passwordService;
    private readonly TokenService _tokenService;

    public AuthController(IUserRepository userRepo, PasswordService passwordService, TokenService tokenService)
    {
        _userRepo = userRepo;
        _passwordService = passwordService;
        _tokenService = tokenService;
    }

    [HttpPost("register")]
    public async Task<IActionResult> Register(NoteUser user)
    {
        if (await _userRepo.GetByEmailAsync(user.Email) is not null)
            return BadRequest("Usu치rio j치 existe");

        user.Password = _passwordService.HashPassword(user);
        user.CreatedAt = DateTime.UtcNow;

        await _userRepo.CreateAsync(user);

        return Ok("Usu치rio criado com sucesso");
    }

    [HttpPost("login")]
    public async Task<IActionResult> Login([FromBody] LoginRequest request)
    {
        var user = await _userRepo.GetByEmailAsync(request.Email);
        if (user == null || !_passwordService.VerifyPassword(user, request.Password))
            return Unauthorized("Credenciais inv치lidas");

        var token = _tokenService.GenerateToken(user.Email);
        return Ok(new { token });
    }

    public class LoginRequest
    {
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
    }
}

-----------
