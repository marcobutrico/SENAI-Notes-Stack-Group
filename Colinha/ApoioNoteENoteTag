// =============================
// MODELS
// =============================
public class Note
{
    public int IdNote { get; set; }
    public string Title { get; set; }
    public string Content { get; set; }
    public string ImageUrl { get; set; }
    public bool IsFavorite { get; set; }
    public bool IsArchived { get; set; }
    public DateTime CreatedAt { get; set; }
    public DateTime? UpdatedAt { get; set; }
    public int IdUser { get; set; }
}

public class NoteTag
{
    public int IdNoteTag { get; set; }
    public int IdNote { get; set; }
    public int IdTag { get; set; }
}

// =============================
// INTERFACES
// =============================
public interface INoteRepository
{
    Task<IEnumerable<Note>> GetAllAsync();
    Task<Note> GetByIdAsync(int id);
    Task AddAsync(Note note);
    Task UpdateAsync(Note note);
    Task DeleteAsync(int id);
}

public interface INoteTagRepository
{
    Task<IEnumerable<NoteTag>> GetAllAsync();
    Task<NoteTag> GetByIdAsync(int id);
    Task AddAsync(NoteTag noteTag);
    Task UpdateAsync(NoteTag noteTag);
    Task DeleteAsync(int id);
}

// =============================
// REPOSITORIES (assumindo EF Core ou similar)
// =============================
public class NoteRepository : INoteRepository
{
    private readonly AppDbContext _context;
    public NoteRepository(AppDbContext context) => _context = context;

    public async Task<IEnumerable<Note>> GetAllAsync() => await _context.Notes.ToListAsync();

    public async Task<Note> GetByIdAsync(int id) => await _context.Notes.FindAsync(id);

    public async Task AddAsync(Note note)
    {
        note.CreatedAt = DateTime.Now;
        _context.Notes.Add(note);
        await _context.SaveChangesAsync();
    }

    public async Task UpdateAsync(Note note)
    {
        note.UpdatedAt = DateTime.Now;
        _context.Notes.Update(note);
        await _context.SaveChangesAsync();
    }

    public async Task DeleteAsync(int id)
    {
        var note = await _context.Notes.FindAsync(id);
        if (note != null)
        {
            _context.Notes.Remove(note);
            await _context.SaveChangesAsync();
        }
    }
}

public class NoteTagRepository : INoteTagRepository
{
    private readonly AppDbContext _context;
    public NoteTagRepository(AppDbContext context) => _context = context;

    public async Task<IEnumerable<NoteTag>> GetAllAsync() => await _context.NoteTags.ToListAsync();

    public async Task<NoteTag> GetByIdAsync(int id) => await _context.NoteTags.FindAsync(id);

    public async Task AddAsync(NoteTag noteTag)
    {
        _context.NoteTags.Add(noteTag);
        await _context.SaveChangesAsync();
    }

    public async Task UpdateAsync(NoteTag noteTag)
    {
        _context.NoteTags.Update(noteTag);
        await _context.SaveChangesAsync();
    }

    public async Task DeleteAsync(int id)
    {
        var noteTag = await _context.NoteTags.FindAsync(id);
        if (noteTag != null)
        {
            _context.NoteTags.Remove(noteTag);
            await _context.SaveChangesAsync();
        }
    }
}

// =============================
// CONTROLLERS
// =============================
[ApiController]
[Route("api/[controller]")]
[Authorize]
public class NotesController : ControllerBase
{
    private readonly INoteRepository _noteRepo;
    public NotesController(INoteRepository noteRepo) => _noteRepo = noteRepo;

    [HttpGet]
    public async Task<IActionResult> Get() => Ok(await _noteRepo.GetAllAsync());

    [HttpGet("{id}")]
    public async Task<IActionResult> GetById(int id)
    {
        var note = await _noteRepo.GetByIdAsync(id);
        return note == null ? NotFound() : Ok(note);
    }

    [HttpPost]
    public async Task<IActionResult> Create(Note note)
    {
        await _noteRepo.AddAsync(note);
        return CreatedAtAction(nameof(GetById), new { id = note.IdNote }, note);
    }

    [HttpPut("{id}")]
    public async Task<IActionResult> Update(int id, Note note)
    {
        if (id != note.IdNote) return BadRequest();
        await _noteRepo.UpdateAsync(note);
        return NoContent();
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> Delete(int id)
    {
        await _noteRepo.DeleteAsync(id);
        return NoContent();
    }
}

[ApiController]
[Route("api/[controller]")]
[Authorize]
public class NoteTagsController : ControllerBase
{
    private readonly INoteTagRepository _noteTagRepo;
    public NoteTagsController(INoteTagRepository noteTagRepo) => _noteTagRepo = noteTagRepo;

    [HttpGet]
    public async Task<IActionResult> Get() => Ok(await _noteTagRepo.GetAllAsync());

    [HttpGet("{id}")]
    public async Task<IActionResult> GetById(int id)
    {
        var noteTag = await _noteTagRepo.GetByIdAsync(id);
        return noteTag == null ? NotFound() : Ok(noteTag);
    }

    [HttpPost]
    public async Task<IActionResult> Create(NoteTag noteTag)
    {
        await _noteTagRepo.AddAsync(noteTag);
        return CreatedAtAction(nameof(GetById), new { id = noteTag.IdNoteTag }, noteTag);
    }

    [HttpPut("{id}")]
    public async Task<IActionResult> Update(int id, NoteTag noteTag)
    {
        if (id != noteTag.IdNoteTag) return BadRequest();
        await _noteTagRepo.UpdateAsync(noteTag);
        return NoContent();
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> Delete(int id)
    {
        await _noteTagRepo.DeleteAsync(id);
        return NoContent();
    }
}
